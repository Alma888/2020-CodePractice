# 2020-CodePractice

解法一：
class Solution {
    public int search(int[] nums, int target) {
        if(nums.length<=0){
            return -1;
        }
        int begin=0;
        int end=nums.length-1;
        while(begin<=end){
             int mid=(begin+end)/2;
            if(target==nums[mid]){
                return mid;
            }else if(target<nums[mid]){
                end=mid-1;
            }else{
                begin=mid+1;
            }
        }
        return -1;
    }
}


解法二：实际使用求中间mid索引建议用这种方法：
         int mid = left + (right-  left)/2; 可以防止left+right溢出（超出整数范围）。
class Solution {
    public int search(int[] nums, int target) {
        int left = 0;
        int right = nums.length - 1;
        while(left <= right){
            int mid = left + (right-left)/2;
            // int mid = (left + right)/2;
            if(nums[mid] > target){
                right = mid - 1;
            }else if(nums[mid] < target){
                left = mid + 1;
            }else{
                return mid;
            }
        }
        return -1;
    }
}

